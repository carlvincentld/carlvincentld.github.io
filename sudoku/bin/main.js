(()=>{"use strict";class e{x;y;column;row;section;value;constructor(e,t,s,n,i){this.x=e,this.y=t,this.column=s,this.row=n,this.section=i,this.value=null}availableValues(){return this.section.intersect(this.column,this.row)}setValue(e){this.value=e,this.column.popValue(e),this.row.popValue(e),this.section.popValue(e)}unsetValue(){const e=this.value;return this.column.pushValue(e),this.row.pushValue(e),this.section.pushValue(e),this.value=null,e}position(e=0,t=0){return`${this.y-e},${this.x-t}`}}function t(e,t){return null==t&&(t=e,e=0),new Array(t-e).fill(0).map(((t,s)=>s+e))}function s(e){const t=Array.from(e);for(let e=t.length-1;e>0;e--){const s=Math.floor(Math.random()*(e+1));[t[e],t[s]]=[t[s],t[e]]}return t}function n(e,t){return Array.from(e).reduce(((e,s,n)=>{const i=t(s,n);return e.has(i)?e.get(i).push(s):e.set(i,[s]),e}),new Map)}class i{ord;availableValues;constructor(e,t){this.ord=t,this.availableValues=new o(1,e+1)}popValue(e){this.availableValues.unset(e)}pushValue(e){this.availableValues.reset(e)}intersect(...e){let t=this.availableValues;for(let s=0;s<e.length;s++)t=t.intersect(e[s].availableValues);return t.toArray()}}class o{_minimum;_maximum;_set;constructor(e,s){e instanceof o?(this._set=e._set.slice(0),this._minimum=e._minimum,this._maximum=e._maximum):(this._set=t(e,s),this._minimum=e,this._maximum=s)}unset(e){this._set[e-this._minimum]=null}reset(e){this._set[e-this._minimum]=e}intersect(e){const t=new o(this);for(let s=0;s<t._set.length;s++)t._set[s]=t._set[s]===e._set[s]?t._set[s]:null;return t}toArray(){const e=new Array;for(let t=0;t<this._set.length;t++)null!==this._set[t]&&e.push(this._set[t]);return e}}class r{WIDTH;HEIGHT;SECTION_COUNT;_columns;_rows;_sections;cells;cellsByPosition;MAX_VALUE;constructor(s,n,o){if(this.WIDTH=s,this.HEIGHT=n,this.SECTION_COUNT=o,9!==this.WIDTH||9!==this.HEIGHT||9!==this.SECTION_COUNT)throw new Error("Only 9x9 gris of 9 sections are supported");const r=this.WIDTH*this.HEIGHT/this.SECTION_COUNT;this.MAX_VALUE=r,this._columns=t(this.WIDTH).map((e=>new i(r,e))),this._rows=t(this.HEIGHT).map((e=>new i(r,e))),this._sections=t(this.SECTION_COUNT).map((e=>new i(r,e))),this.cells=t(this.WIDTH).flatMap((s=>t(this.HEIGHT).map((t=>new e(s,t,this._columns[s],this._rows[t],this._sections[Math.floor(s/3)+3*Math.floor(t/3)]))))),this.cellsByPosition=new Map(this.cells.map((e=>[e.position(),e])))}clone(){const e=new r(this.WIDTH,this.HEIGHT,this.SECTION_COUNT),t=(e,t)=>e.x!==t.x?t.x-e.x:t.y-e.y;e.cells.sort(t);const s=Array.from(this.cells).sort(t);for(let t=0;t<s.length;t++){const n=s[t];null!==n.value&&e.cells[t].setValue(n.value)}return e}prettyFormat(){const e=t(this.HEIGHT).map((()=>t(this.WIDTH)));for(let t=0;t<this.cells.length;t++){const s=this.cells[t];e[s.y][s.x]=`${s.value??" "}`}let s="";for(let t=0;t<e.length;t++){const n=e[t];for(let e=0;e<n.length;e++)s+=`${n[e]}, `;s+="\n"}return s}prettyFormatSection(){const e=t(this.HEIGHT).map((()=>t(this.WIDTH)));for(let t=0;t<this.cells.length;t++){const s=this.cells[t];e[s.y][s.x]=`${s.section.ord}`}let s="";for(let t=0;t<e.length;t++){const n=e[t];for(let e=0;e<n.length;e++)s+=`${n[e]}, `;s+="\n"}return s}validValues(){return t(1,this.MAX_VALUE+1)}}const l=1e5;class a{iteration=0;generate(e){this.iteration=0;const[t,s]=this.solve(e.clone());if(!t)return[t,s];const n=s.cells;for(let e=0;e<n.length;e++){const t=n[e],s=t.unsetValue();this.canSolveOtherWay(n,e,s)&&t.setValue(s)}return[t,s]}solve(e){const t=e.cells;return[this.innerSolve(t,e.cells.length-1),e]}innerSolve(e,t){if(this.iteration+=1,-1===t)return!0;const n=e[t];if(null!==n.value)return this.innerSolve(e,t-1);if(this.iteration>l)return!1;const i=s(n.availableValues());for(let s=0;s<i.length;s++){const o=i[s];if(n.setValue(o),this.innerSolve(e,t-1))return!0;n.unsetValue()}return!1}canSolveOtherWay(e,t,s){const n=e[t],i=n.availableValues();for(let o=0;o<i.length;o++){const r=i[o];if(s===r)continue;n.setValue(r);const l=this.canSolve(e,t-1);if(n.unsetValue(),l)return!0}return!1}canSolve(e,t){if(this.iteration+=1,-1===t)return!0;const s=e[t];if(null!==s.value)return this.canSolve(e,t-1);if(this.iteration>l)return!0;const n=s.availableValues();for(let i=0;i<n.length;i++){const o=n[i];if(s.setValue(o),this.canSolve(e,t-1))return s.unsetValue(),!0;s.unsetValue()}return!1}}class c extends Map{getOrDefault(e,t){return this.has(e)||this.set(e,t(e)),this.get(e)}}class h extends r{_cellsBySection;constructor(e,t,s,n=!1){var i,o;super(e,t,s),this._cellsBySection=(i=this.cells,o=e=>e.section,Array.from(i).reduce(((e,t,s)=>{const n=o(t);return e.has(n)?e.get(n).add(t):e.set(n,new Set([t])),e}),new Map)),n||this.shuffleSections()}clone(){const e=new h(this.WIDTH,this.HEIGHT,this.SECTION_COUNT,!0),t=new Map(function(e,t){const s=new Array,n=Math.max(e.length,t.length);for(let i=0;i<n;i++)s.push([e[i],t[i]]);return s}(this._sections,e._sections)),s=(e,t)=>e.x!==t.x?t.x-e.x:t.y-e.y;e.cells.sort(s);const n=Array.from(this.cells).sort(s);for(let s=0;s<n.length;s++){const i=n[s],o=e.cells[s];o.section=t.get(i.section),null!==i.value&&o.setValue(i.value)}return e}shuffleSections(){for(let e=0;e<64;e++)if(!this.swap())throw new Error("Was not able to swap sections")}swap(){const e=s(this._sections);for(const t of e){const e=new c,n=new Set;for(const s of this._cellsBySection.get(t))for(const i of this.neighbouringCells(s,this.cellsByPosition))i.section!==t&&(e.getOrDefault(i.section,(()=>new Set)).add(s),n.add(i));for(const t of s(n))for(const n of s(e.get(t.section))){if(this.swapSections(t,n,this._cellsBySection),this.isSectionContiguous(t.section,this._cellsBySection,this.cellsByPosition)&&this.isSectionContiguous(n.section,this._cellsBySection,this.cellsByPosition))return!0;this.swapSections(t,n,this._cellsBySection)}}return!1}neighbouringCells(e,t){return[e.position(-1,0),e.position(1,0),e.position(0,-1),e.position(0,1)].reduce(((e,s)=>{const n=t.get(s);return void 0!==n&&e.push(n),e}),new Array)}isSectionContiguous(e,t,s){const n=t.get(e),i=new Set,o=Array.from([n.values().next().value]);for(;o.length;){const t=o.pop();i.has(t)||(i.add(t),o.push(...this.neighbouringCells(t,s).filter((t=>t.section===e))))}return l=n,(r=i).size===l.size&&Array.from(r).every((e=>l.has(e)));var r,l}swapSections(e,t,s){s.get(e.section).delete(e),s.get(t.section).delete(t);const n=e.section;e.section=t.section,t.section=n,s.get(e.section).add(e),s.get(t.section).add(t)}}class u{}class d extends u{_actions;constructor(...e){super(),this._actions=e}do(){for(let e=0;e<this._actions.length;e++)this._actions[e].do()}undo(){for(let e=this._actions.length-1;e>=0;e--)this._actions[e].undo()}}class _{_previouses=[];_nexts=[];_callbacks=[];canUndo(){return 0!==this._previouses.length}undo(){if(0===this._previouses.length)throw new Error("No action can be undone");const e=this._previouses.pop();e.undo(),this._nexts.push(e),this.onActionCompleted()}canRedo(){return 0!==this._nexts.length}redo(){if(0===this._nexts.length)throw new Error("No action can be redone");const e=this._nexts.pop();e.do(),this._previouses.push(e),this.onActionCompleted()}do(e){this._previouses.push(e),e.do(),this._nexts.splice(0,this._nexts.length),this.onActionCompleted()}registerOnActionCompleted(e){this._callbacks.push(e)}onActionCompleted(){this._callbacks.forEach((e=>e()))}}class g extends u{static Instance=new g;do(){}undo(){}}class m extends u{_cell;_markings;constructor(e,t){super(),this._cell=e,this._markings=t}do(){this._markings.forEach((e=>{this._cell.addMarking(e)}))}undo(){this._markings.forEach((e=>{this._cell.removeMaking(e)}))}}class p extends m{constructor(e,t){super(e,t)}do(){super.undo()}undo(){super.do()}}class v extends u{_cell;_number;_previousNumber;constructor(e,t,s){super(),this._cell=e,this._number=t,this._previousNumber=s}do(){this._cell.writeValue(this._number)}undo(){this._cell.writeValue(this._previousNumber)}}class f extends v{constructor(e,t){super(e,null,t)}}const w="http://www.w3.org/2000/svg";class b{createSVG(){const e=document.createElementNS(w,"svg");return e.setAttribute("viewBox","0 0 9 9"),e.setAttribute("width","100%"),e.setAttribute("height","100%"),e}createPencilMarking(e,t,s){const n=9/t*((e-1)%t+.5),i=9/s*(Math.floor((e-1)/t)+.5),o=document.createElementNS(w,"text");return o.classList.add("pencil-marking"),o.setAttribute("font-size","3"),o.setAttribute("font-family","monospace"),o.setAttribute("font-style","italic"),o.setAttribute("font-weight","bold"),o.setAttribute("fill","currentColor"),o.setAttribute("text-anchor","middle"),o.setAttribute("dominant-baseline","central"),o.setAttribute("x",`${n}`),o.setAttribute("y",`${i}`),o.textContent=`${e}`,o}createPenMarking(e,t=!1){const s=this.createCustomText(`${e}`);return s.classList.add("pen-marking"),t?s.setAttribute("font-weight","bold"):(s.setAttribute("font-style","italic"),s.setAttribute("font-weight","normal")),s}createCustomText(e){const t=document.createElementNS(w,"text");return t.setAttribute("font-size","5"),t.setAttribute("font-family","monospace"),t.setAttribute("font-weight","bold"),t.setAttribute("fill","currentColor"),t.setAttribute("text-anchor","middle"),t.setAttribute("dominant-baseline","central"),t.setAttribute("x","4.5"),t.setAttribute("y","4.5"),t.innerHTML=e,t}}class C{_grid;_operations;_control;el;column;row;section;value;_isConstant;_markings;_onValueChanged;_svgGenerator=new b;_svg;constructor(e,t,s,n){if(this._grid=t,this._operations=s,this._control=n,this.column=e.column,this.row=e.row,this.section=e.section,this.value=e.value,this._markings=new Map,this._onValueChanged=[],this.el=document.createElement("td"),this._svg=this._svgGenerator.createSVG(),this.el.appendChild(this._svg),this.el.setAttribute("section",`${e.section.ord}`),t.cellsByPosition.get(e.position(1,0))?.section!==e.section&&this.el.classList.add("section-edge-top"),t.cellsByPosition.get(e.position(-1,0))?.section!==e.section&&this.el.classList.add("section-edge-bottom"),t.cellsByPosition.get(e.position(0,1))?.section!==e.section&&this.el.classList.add("section-edge-left"),t.cellsByPosition.get(e.position(0,-1))?.section!==e.section&&this.el.classList.add("section-edge-right"),this._isConstant=null!==e.value){this.el.classList.add("constant");const t=this._svgGenerator.createPenMarking(e.value,!0);this._svg.appendChild(t)}else this.el.addEventListener("click",this.onClick.bind(this))}registerOnValueChanged(e){this._onValueChanged.push(e)}removeMaking(e){if(!this._markings.has(e))return;const t=this._markings.get(e);this._svg.removeChild(t),this._markings.delete(e)}addMarking(e){if(this._markings.has(e))return;const t=this._svgGenerator.createPencilMarking(e,3,3);this._svg.appendChild(t),this._markings.set(e,t)}writeValue(e){this.value=e,null===e?this._svg.childNodes.forEach((e=>this._svg.removeChild(e))):this._svg.appendChild(this._svgGenerator.createPenMarking(e)),this.onValueChanged()}fillMarkingsAction(){return this._isConstant?g.Instance:new m(this,this._grid.validValues().filter((e=>!this._markings.has(e))))}onValueChanged(){this._onValueChanged.forEach((e=>e(this)))}onClick(){const e=this._control.selectedNumber;this._control.isPencilMarking()?null!==this.value?this._operations.do(new d(new f(this,this.value),new m(this,[e]))):this._markings.has(e)?this._operations.do(new p(this,[e])):this._operations.do(new m(this,[e])):this.value===e?this._operations.do(new f(this,this.value)):(this._operations.do(new d(new p(this,Array.from(this._markings.keys())),new v(this,e,this.value))),this._markings.clear())}}class y{el;get selectedNumber(){return this._selectedNumber}set selectedNumber(e){this._numbers[this._selectedNumber-1].classList.remove("active"),this._selectedNumber=e,this._numbers[this._selectedNumber-1].classList.add("active")}_selectedNumber=1;_isPencilMarking=!0;_numbers=new Array;_svgGenerator=new b;constructor(e,t,s){const n=document.createElement("div");n.classList.add("controls"),n.classList.add("pencil-mode");const i=this.createPencil();n.appendChild(i);for(let t=1;t<=e.MAX_VALUE;t++){const e=this.createNumber(t);e.title=`Selects number ${t} (shortcut: ${t})`,this._numbers.push(e),n.appendChild(e)}const o=this.createUndoButton(t),r=this.createRedoButton(t);t.registerOnActionCompleted((()=>{o.disabled=!t.canUndo(),r.disabled=!t.canRedo()})),n.appendChild(o),n.appendChild(r);const l=this.createFillMarkings();l.addEventListener("click",s),n.append(l),this.el=n}isPencilMarking(){return this._isPencilMarking}togglePencilMarking(){this._isPencilMarking=!this._isPencilMarking,this.el.classList.toggle("pencil-mode",this._isPencilMarking),this.el.classList.toggle("pen-mode",!this._isPencilMarking)}createNumber(e){const t=document.createElement("button");t.title=`Select ${e} (shortcut: ${e})`,t.classList.add("pencil-dependent"),e===this._selectedNumber&&t.classList.add("active");const s=this._svgGenerator.createSVG();return s.appendChild(this._svgGenerator.createPenMarking(e)),s.appendChild(this._svgGenerator.createPencilMarking(e,3,3)),t.appendChild(s),t.addEventListener("click",(()=>{this.selectedNumber=e})),t}createPencil(){const e=document.createElement("button");e.classList.add("pencil"),e.title="Toggle between pen and pencil (shortcut: space)",e.addEventListener("click",(()=>{this.togglePencilMarking()}));const t=this._svgGenerator.createSVG();return t.appendChild(this._svgGenerator.createCustomText("&#x270E")),e.appendChild(t),e}createUndoButton(e){const t=document.createElement("button");t.title="Undo (shortcut: CTRL+Z)",t.classList.add("undo"),t.disabled=!0,t.addEventListener("click",(()=>{e.undo()}));const s=this._svgGenerator.createSVG();return s.appendChild(this._svgGenerator.createCustomText("&#x293A")),t.appendChild(s),t}createRedoButton(e){const t=document.createElement("button");t.title="Redo (shortcut: CTRL+Y)",t.classList.add("redo"),t.disabled=!0,t.addEventListener("click",(()=>{e.redo()}));const s=this._svgGenerator.createSVG(),n=this._svgGenerator.createCustomText("&#x293A");return n.setAttribute("transform-origin","center"),n.setAttribute("transform","scale(-1, 1)"),s.appendChild(n),t.appendChild(s),t}createFillMarkings(){const e=document.createElement("button");e.title="Fill all markings",e.classList.add("pencil-independent");const t=this._svgGenerator.createSVG();for(let e=0;e<9;e++)t.appendChild(this._svgGenerator.createPencilMarking(e+1,3,3));return e.appendChild(t),e}}class k{el;_operations;_renderedCells;_cellsByColumn;_cellsByRow;_cellsBySection;constructor(e){this._operations=new _,this._renderedCells=new Array;const t=new y(e,this._operations,(()=>{this._operations.do(new d(...this._renderedCells.map((e=>e.fillMarkingsAction()))))})),s=this.createTable(e,t);this._cellsByColumn=n(this._renderedCells,(e=>e.column)),this._cellsByRow=n(this._renderedCells,(e=>e.row)),this._cellsBySection=n(this._renderedCells,(e=>e.section));const i=document.createElement("div");i.tabIndex=0,i.style.setProperty("--max-x","3"),i.style.setProperty("--max-y",`${Math.ceil(e.MAX_VALUE/3)}`),i.classList.add("sudoku"),i.appendChild(s),i.appendChild(t.el),i.addEventListener("keydown",(s=>{s.repeat||(1<=+s.key&&+s.key<=e.MAX_VALUE?(t.selectedNumber=+s.key,s.preventDefault()):" "===s.key?(t.togglePencilMarking(),s.preventDefault()):"z"===s.key&&s.ctrlKey?this._operations.canUndo()&&this._operations.undo():"y"===s.key&&s.ctrlKey&&this._operations.canRedo()&&this._operations.redo())})),this.el=i}createTable(e,t){const s=new Map(e.cells.map((e=>[`${e.y},${e.x}`,e]))),n=document.createElement("table");for(let i=0;i<e.HEIGHT;i++){const o=document.createElement("tr");n.appendChild(o);for(let n=0;n<e.WIDTH;n++){const r=s.get(`${i},${n}`),l=new C(r,e,this._operations,t);l.registerOnValueChanged(this.refreshValidation.bind(this)),this._renderedCells.push(l),o.appendChild(l.el)}}return n}refreshValidation(e){this.validateUniqueness(this._cellsByRow.get(e.row),"row"),this.validateUniqueness(this._cellsByColumn.get(e.column),"column"),this.validateUniqueness(this._cellsBySection.get(e.section),"section")}validateUniqueness(e,t){n(e,(e=>e.value)).forEach(((e,s)=>{null!==s&&e.length>1?e.map((e=>e.el)).forEach((e=>e.classList.add(`invalid-${t}`))):e.map((e=>e.el)).forEach((e=>e.classList.remove(`invalid-${t}`)))}))}}function A(){const e=document.getElementById("game");E("classical",e),document.getElementById("new-game-classical").addEventListener("click",(()=>setTimeout((()=>E("classical",e)),0))),document.getElementById("new-game-jigsaw").addEventListener("click",(()=>setTimeout((()=>E("jigsaw",e)),0)))}async function E(e,t){for(let s=1;s<=100;s++){t.innerHTML=`Trying to generate a grid: ${s} of 100 tries;`,await new Promise((e=>setTimeout(e,0)));const n="jigsaw"===e?new h(9,9,9):new r(9,9,9),i=new a,[o,l]=i.generate(n);if(!o)continue;const c=new k(l);return t.innerHTML="",t.appendChild(c.el),void console.log(`Generated a ${n.constructor.name} after ${s} tries.`)}t.innerHTML=`Failed to generate a ${e} grid after 100 tries;`}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",A):A()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,